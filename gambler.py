# -*- coding: utf-8 -*-
# @author: Andrey Pakhomenkov pakhomenkov dog mail.ru
"""–ò–≥—Ä–æ–≤–æ–π –º–æ–¥—É–ª—å."""

import random
import prototype
import functions as func

UNIT_ID: str = "gambler"
HINT: tuple = ("–∏–≥—Ä–∞", "game")
ROCKSCIPAP_COMMANDS: tuple = ("–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞")
ROCKSCIPAP_SHORT_COMMANDS: tuple = ("–∫–∞–º", "–Ω–æ–∂", "–±—É–º")
ROCKSCIPAPLIZSPOCK_COMMANDS: tuple = ("–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞", "—è—â–µ—Ä–∏—Ü–∞", "—Å–ø–æ–∫")
ROCKSCIPAPLIZSPOCK_SHORT_COMMANDS: tuple = ("–∫–∞–º", "–Ω–æ–∂", "–±—É–º", "—è—â–µ—Ä", "—Å–ø–æ–∫")
THROW_COIN_COMMANDS: tuple = ("–º–æ–Ω–µ—Ç–∞", "coin")
ROCK_COMMAND: int = 0
SCISSORS_COMMAND: int = 1
PAPER_COMMAND: int = 2
LIZARD_COMMAND: int = 3
SPOCK_COMMAND: int = 4

EMODJIES: tuple = ("üëäüèª", "‚úåüèª", "‚úãüèª", "ü¶é", "üññüèª")
THUMBS_UP: str = "üëçüèª"
THUMBS_DOWN: str = "üëéüèª"


class CGambler(prototype.CPrototype):
    """–ö–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞."""

    def __init__(self, pconfig: dict):

        super().__init__()
        self.config = pconfig


    def can_process(self, pchat_title: str, pmessage_text: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."""

        assert pchat_title is not None, \
            "Assert: [librarian.can_process] " \
            "–ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä <pchat_title> !"
        assert pmessage_text is not None, \
            "Assert: [librarian.can_process] " \
            "–ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä <pmessage_text> !"
        found: bool = False
        if self.is_enabled(pchat_title):

            word_list: list = func.parse_input(pmessage_text)
            for command in ROCKSCIPAPLIZSPOCK_COMMANDS:

                found = word_list[0] in command
                if found:

                    break
            if not found:

                for command in ROCKSCIPAPLIZSPOCK_SHORT_COMMANDS:

                    found = word_list[0] in command
            if not found:

                for command in THROW_COIN_COMMANDS:

                    found = word_list[0] in command
            if not found:

                found = word_list[0] in HINT
        return found


    def get_help(self, pchat_title: str) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""

        assert pchat_title is not None, \
            "Assert: [librarian.get_help] " \
            "No <pchat_title> parameter specified!"
        command_list: str = ""
        if self.is_enabled(pchat_title):

            for command in ROCKSCIPAPLIZSPOCK_COMMANDS:

                command_list += ", ".join(command)
                command_list += "\n"
            for command in THROW_COIN_COMMANDS:

                command_list += ", ".join(command)
                command_list += "\n"
        return command_list


    def get_hint(self, pchat_title: str) -> str:  # [arguments-differ]
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥—É–ª–µ–º.  """

        assert pchat_title is not None, \
            "Assert: [librarian.get_hint] " \
            "–ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä <pchat_title> !"
        if self.is_enabled(pchat_title):

            return ", ".join(HINT)
        return ""


    def is_enabled(self, pchat_title: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å —Ä–∞–∑—Ä–µ—à–µ–Ω –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ."""

        assert pchat_title is not None, \
            "Assert: [librarian.is_enabled] " \
            "–ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä <pchat_title> !"
        return UNIT_ID in self.config["chats"][pchat_title]


    def is_master(self, puser_name, puser_title):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ–∑—è–∏–Ω–æ–º –±–æ—Ç–∞."""

        if puser_name == self.config["master"]:

            return True, ""
        # *** –ù–∏–∑–∑—è
        return False, f"–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –ø—Ä–∞–≤, {puser_title}."

    def reload(self):
        """–ü—É—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞."""

    def rock_scissors_paper(self, pcommand: int):
        """–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞."""

        answer = f"–í–∞—à –≤—ã–±–æ—Ä {EMODJIES[pcommand]} {ROCKSCIPAP_COMMANDS[pcommand]}\n"
        turn = random.randint(0,2)
        if pcommand == turn:

            answer += f"–Ø –≤—ã–±—Ä–∞–ª —Ç–∞–∫–∂–µ {EMODJIES[turn]}{ROCKSCIPAP_COMMANDS[turn]}. –ù–∏—á—å—è. ü§ù"
        else:

            answer += f"–Ø –≤—ã–±–∏—Ä–∞—é {EMODJIES[turn]} {ROCKSCIPAP_COMMANDS[turn]}."
            if turn == ROCK_COMMAND:

                # *** –ö–∞–º–µ–Ω—å
                if pcommand == SCISSORS_COMMAND:

                    answer += " –ö–∞–º–µ–Ω—å —Ç—É–ø–∏—Ç –Ω–æ–∂–Ω–∏—Ü—ã. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üëéüèª"
                else:

                    answer += " –ë—É–º–∞–≥–∞ –æ–±—ë—Ä—Ç—ã–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. üëçüèª"
            elif turn == SCISSORS_COMMAND:

                # *** –ù–æ–∂–Ω–∏—Ü—ã
                if pcommand == PAPER_COMMAND:

                    answer +=  " –ù–æ–∂–Ω–∏—Ü—ã —Ä–µ–∂—É—Ç –±—É–º–∞–≥—É. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üëéüèª"
                else:

                    answer += " –ö–∞–º–µ–Ω—å —Ç—É–ø–∏—Ç –Ω–æ–∂–Ω–∏—Ü—ã. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. üëçüèª"
            else:

                # *** –ë—É–º–∞–≥–∞.
                if pcommand == ROCK_COMMAND:

                    answer +=  " –ë—É–º–∞–≥–∞ –æ–±—ë—Ä—Ç—ã–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üëéüèª"
                else:

                    answer += " –ù–æ–∂–Ω–∏—Ü—ã —Ä–µ–∂—É—Ç –±—É–º–∞–≥—É. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. üëçüèª"
        return answer


    def rock_scissors_paper_lizard_spock(self, pcommand: int):
        """–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞."""

        answer = f"–í–∞—à –≤—ã–±–æ—Ä {EMODJIES[pcommand]} {ROCKSCIPAPLIZSPOCK_COMMANDS[pcommand]}\n"
        turn = random.randint(0,4)
        if pcommand == turn:

            answer += f"–Ø –≤—ã–±—Ä–∞–ª —Ç–∞–∫–∂–µ {EMODJIES[turn]}{ROCKSCIPAPLIZSPOCK_COMMANDS[turn]}. –ù–∏—á—å—è. ü§ù"
        else:

            answer += f"–Ø –≤—ã–±–∏—Ä–∞—é {EMODJIES[turn]} {ROCKSCIPAPLIZSPOCK_COMMANDS[turn]}."
            if turn == ROCK_COMMAND:

                if pcommand == SCISSORS_COMMAND:

                    answer += f" –ö–∞–º–µ–Ω—å —Ç—É–ø–∏—Ç –Ω–æ–∂–Ω–∏—Ü—ã. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. {THUMBS_DOWN}"
                elif pcommand == PAPER_COMMAND:

                    answer += f" –ë—É–º–∞–≥–∞ –æ–±—ë—Ä—Ç—ã–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. {THUMBS_UP}"
                elif pcommand == LIZARD_COMMAND:

                    answer += f" –ö–∞–º–µ–Ω—å –¥–∞–≤–∏—Ç —è—â–µ—Ä–∏—Ü—É. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. {THUMBS_DOWN}"
                elif pcommand == SPOCK_COMMAND:

                    answer += f" –°–ø–æ–∫ –∏—Å–ø–∞—Ä—è–µ—Ç –∫–∞–º–µ–Ω—å. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. {THUMBS_UP}"

            elif turn == SCISSORS_COMMAND:

                if pcommand == ROCK_COMMAND:

                    answer += f" –ö–∞–º–µ–Ω—å —Ç—É–ø–∏—Ç –Ω–æ–∂–Ω–∏—Ü—ã. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. {THUMBS_UP}"
                elif pcommand == PAPER_COMMAND:

                    answer += f" –ù–æ–∂–Ω–∏—Ü—ã —Ä–µ–∂—É—Ç –±—É–º–∞–≥—É. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. {THUMBS_DOWN}"
                elif pcommand == LIZARD_COMMAND:

                    answer += f" –ù–æ–∂–Ω–∏—Ü—ã —É–±–∏–≤–∞—é—Ç —è—â–µ—Ä–∏—Ü—É. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. {THUMBS_DOWN}"
                elif pcommand == SPOCK_COMMAND:

                    answer += f" –°–ø–æ–∫ –ª–æ–º–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. {THUMBS_UP}"

            elif turn == PAPER_COMMAND:

                if pcommand == ROCK_COMMAND:

                    answer += f" –ë—É–º–∞–≥–∞ –æ–±—ë—Ä—Ç—ã–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. {THUMBS_DOWN}"
                elif pcommand == SCISSORS_COMMAND:

                    answer += f" –ù–æ–∂–Ω–∏—Ü—ã —Ä–µ–∂—É—Ç –±—É–º–∞–≥—É. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. {THUMBS_UP}"
                elif pcommand == LIZARD_COMMAND:

                    answer += f" –Ø—â–µ—Ä–∏—Ü–∞ —Å—ä–µ–¥–∞–µ—Ç –±—É–º–∞–≥—É. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. {THUMBS_UP}"
                elif pcommand == SPOCK_COMMAND:

                    answer += f" –ë—É–º–∞–≥–∞ –æ–±–≤–∏–Ω—è–µ—Ç –°–ø–æ–∫–∞. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. {THUMBS_DOWN}"

            elif turn == LIZARD_COMMAND:

                if pcommand == ROCK_COMMAND:

                    answer += f" –ö–∞–º–µ–Ω—å –¥–∞–≤–∏—Ç —è—â–µ—Ä–∏—Ü—É. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. {THUMBS_UP}"
                elif pcommand == SCISSORS_COMMAND:

                    answer += f" –ù–æ–∂–Ω–∏—Ü—ã —É–±–∏–≤–∞—é—Ç —è—â–µ—Ä–∏—Ü—É. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. {THUMBS_UP}"
                elif pcommand == PAPER_COMMAND:

                    answer += f" –Ø—â–µ—Ä–∏—Ü–∞ —Å—ä–µ–¥–∞–µ—Ç –±—É–º–∞–≥—É. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. {THUMBS_DOWN}"
                elif pcommand == SPOCK_COMMAND:

                    answer += f" –Ø—â–µ—Ä–∏—Ü–∞ –∫—É—Å–∞–µ—Ç –°–ø–æ–∫–∞. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. {THUMBS_DOWN}"

            elif turn == SPOCK_COMMAND:

                if pcommand == ROCK_COMMAND:

                    answer += f" –°–ø–æ–∫ –∏—Å–ø–∞—Ä—è–µ—Ç –∫–∞–º–µ–Ω—å. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. {THUMBS_DOWN}"
                elif pcommand == SCISSORS_COMMAND:

                    answer += f" –°–ø–æ–∫ –ª–æ–º–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. {THUMBS_DOWN}"
                elif pcommand == PAPER_COMMAND:

                    answer += f" –ë—É–º–∞–≥–∞ –æ–±–≤–∏–Ω—è–µ—Ç –°–ø–æ–∫–∞. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. {THUMBS_UP}"
                elif pcommand == LIZARD_COMMAND:

                    answer += f" –Ø—â–µ—Ä–∏—Ü–∞ –∫—É—Å–∞–µ—Ç –°–ø–æ–∫–∞. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. {THUMBS_UP}"

        return answer


    def gambler(self, pchat_title, pmessage_text: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞."""

        answer: str = ""
        word_list: list = func.parse_input(pmessage_text)
        if self.can_process(pchat_title, pmessage_text):

            if word_list[0] in HINT:

                answer = self.get_help(pchat_title)
            else:

                # *** –ü–æ–ª—É—á–∏–º –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã
                if word_list[0] in ROCKSCIPAPLIZSPOCK_COMMANDS:

                    answer = self.rock_scissors_paper_lizard_spock(ROCKSCIPAPLIZSPOCK_COMMANDS.index(word_list[0]))
                elif word_list[0] in ROCKSCIPAPLIZSPOCK_SHORT_COMMANDS:

                    answer = self.rock_scissors_paper_lizard_spock(ROCKSCIPAPLIZSPOCK_SHORT_COMMANDS.index(word_list[0]))
                elif word_list[0] in THROW_COIN_COMMANDS:

                    answer = self.throw_coin()
                else:

                    answer = "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∏–≥—Ä—ã"
            if answer:

                print("> Gambler –æ—Ç–≤–µ—á–∞–µ—Ç: ", answer[:func.OUT_MSG_LOG_LEN])

        return answer

    def throw_coin(self):
        """–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞."""
        answer: str = ""
        turn: int = random.randint(0,99)
        if turn % 2 == 0:

            answer =  "–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞"
        else:

            answer = "–í—ã–ø–∞–ª –æ—Ä—ë–ª"
        return answer
