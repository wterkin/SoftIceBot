#! /usr/bin/python3
# -*- coding: utf-8 -*-
# @author: Andrey Pakhomenkov
"""–ò–≥—Ä–æ–≤–æ–π –º–æ–¥—É–ª—å."""


import random
# import typing as type
import prototype
import functions as func

UNIT_ID: str = "gambler"
HINT: tuple = ("–∏–≥—Ä–∞", "game")
GAMBLER_COMMANDS: tuple = ("–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞")
GAMBLER_SHORT_COMMANDS: tuple = ("–∫–∞–º", "–Ω–æ–∂", "–±—É–º")
ROCK_COMMAND: int = 0
SCISSORS_COMMAND: int = 1
PAPER_COMMAND: int = 2
EMODJIES: tuple = ("üëäüèª", "‚úåüèª", "‚úãüèª")

class CGambler(prototype.CPrototype):
    """–ö–ª–∞—Å—Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è."""

    def __init__(self, pconfig: dict):

        super().__init__()
        self.config = pconfig
        # self.data_path = pdata_path + LIBRARIAN_FOLDER
        # self.quotes: list = []
        # self.reload()

    def can_process(self, pchat_title: str, pmessage_text: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."""
        assert pchat_title is not None, \
            "Assert: [librarian.can_process] " \
            "–ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä <pchat_title> !"
        assert pmessage_text is not None, \
            "Assert: [librarian.can_process] " \
            "–ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä <pmessage_text> !"
        found: bool = False
        if self.is_enabled(pchat_title):

            word_list: list = func.parse_input(pmessage_text)
            for command in GAMBLER_COMMANDS:

                found = word_list[0] in command
                if found:

                    break
            if not found:

                found = word_list[0] in HINT
        return found


    def get_help(self, pchat_title: str) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
        assert pchat_title is not None, \
            "Assert: [librarian.get_help] " \
            "No <pchat_title> parameter specified!"
        command_list: str = ""
        if self.is_enabled(pchat_title):

            for command in GAMBLER_COMMANDS:

                command_list += ", ".join(command)
                command_list += "\n"
        return command_list


    def get_hint(self, pchat_title: str) -> str:  # [arguments-differ]
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥—É–ª–µ–º.  """
        assert pchat_title is not None, \
            "Assert: [librarian.get_hint] " \
            "–ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä <pchat_title> !"
        if self.is_enabled(pchat_title):

            return ", ".join(HINT)
        return ""


    def is_enabled(self, pchat_title: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å —Ä–∞–∑—Ä–µ—à–µ–Ω –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ."""
        assert pchat_title is not None, \
            "Assert: [librarian.is_enabled] " \
            "–ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä <pchat_title> !"
        return UNIT_ID in self.config["chats"][pchat_title]


    def is_master(self, puser_name, puser_title):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ–∑—è–∏–Ω–æ–º –±–æ—Ç–∞."""

        if puser_name == self.config["master"]:

            return True, ""
        # *** –ù–∏–∑–∑—è
        print(f"> Librarian: –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –æ—Ç –Ω–µ–ª–µ–≥–∏—Ç–∏–º–Ω–æ–≥–æ –ª–∏—Ü–∞ {puser_title}.")
        return False, f"–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –ø—Ä–∞–≤, {puser_title}."


    def gambler(self, pchat_title, puser_name: str, puser_title: str, pmessage_text: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞."""

        command: int
        answer: str = ""
        word_list: list = func.parse_input(pmessage_text)
        if self.can_process(pchat_title, pmessage_text):

            if word_list[0] in HINT:

                answer = self.get_help(pchat_title)
            else:

                # *** –ü–æ–ª—É—á–∏–º –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã
                if word_list[0] in GAMBLER_COMMANDS:

                    command = GAMBLER_COMMANDS.index(word_list[0])
                elif word_list[0] in GAMBLER_SHORT_COMMANDS:

                    command = GAMBLER_SHORT_COMMANDS.index(word_list[0])
                else:

                    command = -1
            if command >= 0:

                answer = f"–í–∞—à –≤—ã–±–æ—Ä {EMODJIES[command]} {GAMBLER_COMMANDS[command]}\n"
                turn = random.randint(0,2)
                print(f"—Ö–æ–¥  {turn}")
                if command == turn:

                    answer += f"–Ø –≤—ã–±—Ä–∞–ª —Ç–∞–∫–∂–µ {EMODJIES[turn]}{GAMBLER_COMMANDS[turn]}. –ù–∏—á—å—è."
                else:

                    answer += f"–Ø –≤—ã–±–∏—Ä–∞—é {EMODJIES[turn]} {GAMBLER_COMMANDS[turn]}."
                    if turn == ROCK_COMMAND:

                        # *** –ö–∞–º–µ–Ω—å
                        if command == SCISSORS_COMMAND:

                            answer += " –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üëéüèª"
                        else:

                            answer += " –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. üëçüèª"
                    elif turn == SCISSORS_COMMAND:

                        # *** –ù–æ–∂–Ω–∏—Ü—ã
                        if command == PAPER_COMMAND:

                            answer +=  " –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üëéüèª"
                        else:

                            answer += " –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. üëçüèª"
                    else:

                        # *** –ë—É–º–∞–≥–∞.
                        if command == ROCK_COMMAND:

                            answer +=  " –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üëéüèª"
                        else:

                            answer += " –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. üëçüèª"

            else:

                answer = f"–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∏–≥—Ä—ã"
            if answer:

                print("> Gambler –æ—Ç–≤–µ—á–∞–µ—Ç: ", answer[:func.OUT_MSG_LOG_LEN])

        return answer


