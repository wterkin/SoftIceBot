# -*- coding: utf-8 -*-
# @author: Andrey Pakhomenkov pakhomenkov@yandex.ru
"""–ú–æ–¥—É–ª—å –±–∞—Ä–º–µ–Ω–∞."""

import random
import string
from datetime import datetime
# from pdb import pm
from time import sleep
from pathlib import Path
import functions as func
import constants as cn
import prototype

# *** –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤
BABBLER_RELOAD: list = ["blreload", "blrl"]
# *** –ö–ª—é—á –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –∫–æ–Ω—Ñ–∏–≥–∞
UNIT_ID = "babbler"
BABBLER_PATH: str = "babbler/"
BABBLER_PERIOD_KEY = "babbler_period"
TRIGGERS_FOLDER: str = "triggers"
REACTIONS_FOLDER: str = "reactions"
REACTIONS_INDEX: int = 1
BABBLER_EMODJI: list = ["üòé", "üòä", "‚ò∫", "üòä", "üòã"]


class CBabbler(prototype.CPrototype):
    """–ö–ª–∞—Å—Å –±–æ–ª—Ç—É–Ω–∞."""

    def __init__(self, pconfig: dict, pdata_path: str):
        """"–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä."""
        super().__init__()
        self.config: dict = pconfig
        self.data_path: str = pdata_path + BABBLER_PATH
        self.mind: list = []
        self.last_phrase_time: datetime = datetime.now()
        self.reload()

    def babbler(self, pmsg_rec: dict) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ–ª—Ç—É–Ω–∞."""
        answer: str = ""
        word_list: list = func.parse_input(pmsg_rec[cn.MTEXT])
        if self.can_process(pmsg_rec[cn.MCHAT_TITLE], pmsg_rec[cn.MTEXT]):

            # *** –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –±–∞–∑—ã.
            if word_list[0] in BABBLER_RELOAD:

                if self.is_master(pmsg_rec[cn.MUSER_NAME]):

                    self.reload()
                    answer = "–ë–∞–∑–∞ –±–æ–ª—Ç—É–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                else:

                    print(f"> Babbler: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥–∞ –æ—Ç "
                          f"–Ω–µ–ª–µ–≥–∏—Ç–∏–º–Ω–æ–≥–æ –ª–∏—Ü–∞ {pmsg_rec[cn.MUSER_TITLE]}.")
                    answer = f"–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –ø—Ä–∞–≤, {pmsg_rec[cn.MUSER_TITLE]}."
        return answer

    def can_process(self, pchat_title: str, pmessage_text: str) -> bool:
        """–ë–æ–ª—Ç—É–Ω –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."""
        assert pchat_title is not None, \
            "Assert: [babbler.can_process] –ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä <pchat_title> !"
        assert pmessage_text is not None, \
            "Assert: [babbler.can_process] –ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä <pmessage_text> !"
        return self.is_enabled(pchat_title)

    def get_help(self, pchat_title: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        return ""

    def get_hint(self, pchat_title: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è, –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—É—é
           –º–æ–¥—É–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        return ""

    def is_enabled(self, pchat_title: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±–∞—Ä–º–µ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ."""
        assert pchat_title is not None, \
            "Assert: [babbler.is_enabled] –ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä <pchat_title> !"
        return UNIT_ID in self.config["chats"][pchat_title]

    def is_master(self, puser_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ö–æ–∑—è–∏–Ω –ª–∏ –æ—Ç–¥–∞–ª –∫–æ–º–∞–Ω–¥—É."""
        return puser_name == self.config["master"]

    def reload(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç—ã –±–æ–ª—Ç—É–Ω–∞."""
        # *** –°–æ–±–∏—Ä–∞–µ–º –ø—É—Ç–∏
        triggers_path = Path(self.data_path) / TRIGGERS_FOLDER
        assert triggers_path.is_dir(), f"{TRIGGERS_FOLDER} must be folder"
        reactions_path = Path(self.data_path) / REACTIONS_FOLDER
        assert reactions_path.is_dir(), f"{REACTIONS_FOLDER} must be folder"
        result: bool = False
        self.mind.clear()
        for trigger in triggers_path.iterdir():

            if trigger.is_file():

                module = Path(trigger).resolve().name
                reaction = reactions_path / module
                if reaction.is_file():
                    trigger_content: list = func.load_from_file(str(trigger))
                    block: list = [trigger_content]
                    reaction_content: list = func.load_from_file(str(reaction))
                    block.append(reaction_content)
                    self.mind.append(block)
                    result = True
        if self.mind:
            print(f"> Babbler —É—Å–ø–µ—à–Ω–æ (–ø–µ—Ä–µ)–∑–∞–≥—Ä—É–∑–∏–ª {len(self.mind)} —Ä–µ–∞–∫—Ü–∏–π.")
        return result

    def talk(self, pmsg_rec: dict) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ–ª—Ç—É–Ω–∞."""

        answer: str = ""
        # *** –ó–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—Ä–∞–∑—ã –ø—Ä–æ—à–µ–ª?
        # print(f"&&&&& 2 {pmsg_rec[cn.MCHAT_TITLE]}")
        # s = self.config["chats"][pmsg_rec[cn.MCHAT_TITLE]]
        # print(f"&&&&& 3 {s}")
        if self.is_enabled(pmsg_rec[cn.MCHAT_TITLE]):

            minutes: float = (datetime.now() - self.last_phrase_time).total_seconds() / \
                             int(self.config[BABBLER_PERIOD_KEY])
            if minutes > 1:
                answer = self.think(pmsg_rec[cn.MTEXT])
            if answer:
                print(f"> Babbler –æ—Ç–≤–µ—á–∞–µ—Ç: {answer[:func.OUT_MSG_LOG_LEN]}...")
                self.last_phrase_time = datetime.now()
        return answer

    def think(self, pmessage_text: str):
        """–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π =)"""
        word_list: list = pmessage_text.split(" ")
        answer: str = ""
        for word in word_list:

            clean_word = word.rstrip(string.punctuation).lower().strip()
            if len(clean_word) > 1:

                for block in self.mind:

                    for block_item in block:

                        if clean_word in block_item:
                            answer = f"{random.choice(block[REACTIONS_INDEX])}"
                            sleep(1)
                            break
                    if answer:
                        break
            if answer:
                break
        return answer
