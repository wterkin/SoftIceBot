# -*- coding: utf-8 -*-
# @author: Andrey Pakhomenkov pakhomenkov@yandex.ru
"""–ü–æ–≥–æ–¥–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –±–æ—Ç–∞."""

# from sys import path
import datetime as pdate
import requests

import functions as func
import prototype

# pylint: disable=wrong-import-position
# path.insert(0, "./")
# path.insert(0, "d:/Work/projects/")

# import owm
# os.system()

WEATHER_COMMANDS = ["–ø–æ–≥–æ–¥–∞", "–ø–≥", "weather", "wt", "–ø—Ä–æ–≥–Ω–æ–∑", "–ø—Ä", "forecast", "fr"]
CHANNEL_LIST_KEY = "meteorolog_chats"  # X
ENABLED_IN_CHATS_KEY = "meteorolog_chats"
HINT = ["–º–µ—Ç–µ–æ", "meteo"]
FIND_CITY_URL = 'http://api.openweathermap.org/data/2.5/find'
FORECAST_WEATHER_URL = 'http://api.openweathermap.org/data/2.5/forecast'
ICON_CONVERT: dict = {"01d": "–Ø—Å–Ω–æ. ‚òÄÔ∏è",
                      "02d": "–Ø—Å–Ω–æ. ‚òÄÔ∏è",
                      "01n": "–Ø—Å–Ω–æ. üåú",
                      "02n": "–Ø—Å–Ω–æ. üåú",
                      "03d": "–û–±–ª–∞—á–Ω–æ. ‚òÅ",
                      "04d": "–û–±–ª–∞—á–Ω–æ. ‚òÅ",
                      "03n": "–û–±–ª–∞—á–Ω–æ. ‚òÅ",
                      "04n": "–û–±–ª–∞—á–Ω–æ. ‚òÅ",
                      "09d": "–î–æ–∂–¥—å. üåß",
                      "10d": "–î–æ–∂–¥—å. üåß",
                      "09n": "–î–æ–∂–¥—å. üåß",
                      "10n": "–î–æ–∂–¥—å. üåß",
                      "11d": "–ì—Ä–æ–∑–∞. üå©",
                      "11n": "–ì—Ä–æ–∑–∞. üå©",
                      "13d": "–°–Ω–µ–≥. ‚ùÑ",
                      "13n": "–°–Ω–µ–≥. ‚ùÑ",
                      "50d": "–¢—É–º–∞–Ω.üå´",
                      "50n": "–¢—É–º–∞–Ω.üå´"}
RUSSIAN_DATE_FORMAT = "%d.%m.%Y"


class CMeteorolog(prototype.CPrototype):
    """–ö–ª–∞—Å—Å –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∞."""

    def __init__(self, pconfig):
        super().__init__()
        self.config = pconfig

    def can_process(self, pchat_title: str, pmessage_text: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É"""

        if self.is_enabled(pchat_title):
            word_list: list = func.parse_input(pmessage_text)
            return word_list[0] in WEATHER_COMMANDS or word_list[0] in HINT
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –±–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω—É–∂–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ
    def get_city_id(self, pcity_name: str, plang: str = "ru"):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≥–æ—Ä–æ–¥–∞"""
        city_id: int = 0
        try:

            res = requests.get(FIND_CITY_URL,
                               params={'q': pcity_name, 'type': 'like',
                                       'units': 'metric', 'lang': plang,
                                       'APPID': self.config["api_key"]})
            data = res.json()
            # print(data)
            # cities = ["{} ({})".format(d['name'], d['sys']['country'])
            #           for d in data['list']]
            if len(data['list']) > 0:

                city_id = data['list'][0]['id']
        except Exception as ex:
            print("Exception (find):", ex)
        assert isinstance(city_id, int)
        return city_id

    def get_help(self) -> str:  # noqa
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
        command_list: str = ""
        for command in WEATHER_COMMANDS:
            command_list += command + ", "
        command_list = command_list[:-2]
        command_list += "\n"
        return command_list

    def get_hint(self, pchat_title: str) -> str:  # [arguments-differ]
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥—É–ª–µ–º.  """
        assert pchat_title is not None, \
            "Assert: [barman.get_hint] " \
            "No <pchat_title> parameter specified!"

        if self.is_enabled(pchat_title):
            return ", ".join(HINT)
        return ""

    def get_wind_direction(self, pdegree):  # noqa
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞."""
        directions: list = ['—Å–µ–≤. ', '—Å–≤', ' –≤–æ—Å—Ç.', '—é–≤', '—é–≥ ', '—é–∑', ' –∑–∞–ø.', '—Å–∑']
        result: str = ""
        for i in range(0, 8):

            step = 45.
            min_degree = i * step - 45 / 2.
            max_degree = i * step + 45 / 2.
            if i == 0 and pdegree > 360 - 45 / 2.:
                pdegree = pdegree - 360
            if min_degree <= pdegree <= max_degree:
                result = directions[i]
                break
        return result

    def is_enabled(self, pchat_title: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ."""

        return pchat_title in self.config[ENABLED_IN_CHATS_KEY]

    def meteorolog(self, pchat_title: str, pmessage_text: str) -> str:
        """–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        message: str = ""
        word_list: list = func.parse_input(pmessage_text)
        # *** –ú–µ—Ç–µ–æ—Ä–æ–ª–æ–≥ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É?
        if self.can_process(pchat_title, pmessage_text):

            # *** –ó–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–º–æ—â—å?
            if word_list[0] in HINT:

                message = self.get_help()
            # *** –ó–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–≥–æ–¥—É?
            else:

                # *** –ê –≥–æ—Ä–æ–¥ —É–∫–∞–∑–∞–ª–∏?
                if len(word_list) > 1:

                    # *** –ü–æ–ª—É—á–∏–º ID –≥–æ—Ä–æ–¥–∞
                    city_name = " ".join(word_list[1:])
                    city_id = self.get_city_id(city_name)
                    if city_id > 0:

                        # *** –£–∫–∞–∑–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥, —Ä–∞–±–æ—Ç–∞–µ–º.
                        now: pdate.datetime = pdate.datetime.now()
                        date_str: str = ""
                        weather_str: str = ""
                        # *** –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?
                        if word_list[0] in ["–ø—Ä–æ–≥–Ω–æ–∑", "–ø—Ä", "forecast", "fr"]:

                            # *** –î–∞, —Ç–∞–∫ –∏ –µ—Å—Ç—å.
                            tomorrow: pdate.datetime = now + pdate.timedelta(days=1)
                            date_str = tomorrow.strftime(RUSSIAN_DATE_FORMAT)
                            weather_str = self.request_weather(city_id, tomorrow)

                        elif word_list[0] in ["–ø–æ–≥–æ–¥–∞", "–ø–≥", "weather", "wt"]:

                            # *** –ù–µ—Ç, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ï—â–µ –Ω–µ –ø–æ–∑–¥–Ω–æ?
                            if now.hour < 21:

                                # *** –í–ø–æ–ª–Ω–µ –µ—â–µ –º–æ–∂–Ω–æ
                                date_str = now.strftime(RUSSIAN_DATE_FORMAT)
                                weather_str = self.request_weather(city_id, now)
                        # *** –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–∑–¥–Ω–æ, —Ç–æ –≤—ã–¥–∞–¥–∏–º –ø–æ–≥–æ–¥—É, –∏–Ω–∞—á–µ –¥–∞–¥–∏–º –∑–Ω–∞—Ç—å —é–∑–µ—Ä—É
                        if now.hour < 21:

                            message = f"{city_name} : {date_str} : {weather_str}"
                        else:

                            message = "–ü–æ–∑–¥–Ω–æ —É–∂–µ, –∫–∞–∫–∞—è —Ç–µ–±–µ –ø–æ–≥–æ–¥–∞??!"
                    else:

                        message = f"""–ö–∞–∫–æ–π-—Ç–∞–∫–æ–π \" {' '.join(word_list[1:])}\" ? 
                                      –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞!"""
                else:

                    message = "–ê –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–≥–æ–¥–∞ –Ω—É–∂–Ω–∞?"
        return message

    def reload(self):
        pass

    def request_weather(self, pcity_id, prequest_date: pdate.datetime, plang: str = "ru"):
        """–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞."""
        message: str = ""
        min_temperature: int = 100
        max_temperature: int = 0
        min_pressure: int = 10000
        max_pressure: int = 0
        min_humidity: int = 100
        max_humidity: int = 0
        min_wind_speed: int = 200
        max_wind_speed: int = 0
        min_wind_angle: int = 360
        max_wind_angle: int = 0
        weather: list = []
        weather_line: str = ""
        try:

            res = requests.get(FORECAST_WEATHER_URL,
                               params={'id': pcity_id, 'units': 'metric',
                                       'lang': plang, 'APPID': self.config["api_key"]})
            data = res.json()
            for item in data['list']:

                # 1. –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
                data_datetime: pdate.datetime = pdate.datetime.fromtimestamp(item['dt'])
                if data_datetime.date() == prequest_date.date():

                    main = item['main']
                    # *** –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                    if main["temp"] < min_temperature:
                        min_temperature = main["temp"]
                    if main["temp"] > max_temperature:
                        max_temperature = main["temp"]
                    # *** –î–∞–≤–ª–µ–Ω–∏–µ
                    if main["pressure"] < min_pressure:
                        min_pressure = main["pressure"]
                    if main["pressure"] > max_pressure:
                        max_pressure = main["pressure"]
                    # *** –í–ª–∞–∂–Ω–æ—Å—Ç—å
                    if main["humidity"] < min_humidity:
                        min_humidity = main["humidity"]
                    if main["humidity"] > max_humidity:
                        max_humidity = main["humidity"]
                    wind_speed = item["wind"]["speed"]
                    wind_angle = item["wind"]["deg"]
                    if wind_speed < min_wind_speed:
                        min_wind_speed = wind_speed
                        min_wind_angle = wind_angle
                    if wind_speed > max_wind_speed:
                        max_wind_speed = wind_speed
                        max_wind_angle = wind_angle
                    icon = item["weather"][0]["icon"]
                    # *** –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ "—è—Å–Ω–æ", —Ç–æ –Ω–æ—á—å –Ω–µ –Ω—É–∂–Ω–∞
                    if icon[0:2] not in ["01", "02"]:

                        # *** –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –¥–µ–Ω—å
                        icon = icon[0:2] + "d"
                    else:

                        # *** –ø—Ä–∏–≤–æ–¥–∏–º –≤—Å—ë –∫ 1
                        icon = "01d"
                    # *** –ï—Å–ª–∏ –æ–±–ª–∞—á–Ω–æ
                    if icon[0:2] == "04":

                        # *** –ø—Ä–∏–≤–æ–¥–∏–º –≤—Å—ë –∫ 3
                        icon = "03d"
                    # *** –ï—Å–ª–∏ –¥–æ–∂–¥—å
                    elif icon[0:2] == "10":

                        # *** –ü—Ä–∏–≤–æ–¥–∏–º –∫ 9
                        icon = "09d"

                    if icon not in weather:

                        weather.append(icon)
            for icon in weather:
                # weather_line += self.get_weather(icon) + " "
                weather_line += ICON_CONVERT[icon] + " "

            message = f"–¢–µ–º–ø.: {round(min_temperature)} - {round(max_temperature)} ¬∞C, " \
                      f" –¥–∞–≤–ª.: {round(min_pressure * 0.75)} - {round(max_pressure * 0.75)}" \
                      f"–º–º.—Ä—Ç.—Å—Ç., " \
                      f" –≤–ª–∞–∂–Ω.: {round(min_humidity)} - {round(max_humidity)} %, " \
                      f" –≤–µ—Ç–µ—Ä: {round(min_wind_speed)} " \
                      f"–º/—Å {self.get_wind_direction(min_wind_angle)} " \
                      f"- {round(max_wind_speed)} –º/c {self.get_wind_direction(max_wind_angle)}, " \
                      f" {weather_line}"

        except Exception as ex:

            print("Exception (forecast):", ex)
        return message
