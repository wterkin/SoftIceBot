# -*- coding: utf-8 -*-
# @author: Andrey Pakhomenkov pakhomenkov@yandex.ru
"""–ú–æ–¥—É–ª—å –±–∞—Ä–º–µ–Ω–∞."""

import random

import functions as func
import prototype

# *** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –æ–Ω–∏ –∂–µ –∏–Ω–¥–µ–∫—Å—ã, –Ω–∞–ø–∏—Ç–∫–æ–≤
BEER_ID: int = 0
VODKA_ID: int = 1
COGNAC_ID: int = 2
COCKTAIL_ID: int = 3
TEA_ID: int = 4
COFFEE_ID: int = 5
COOKIES_ID: int = 6

COMMANDS: list = [["–ø–∏–≤–æ", "beer", "–ø–≤", "br"],
                  ["–≤–æ–¥–∫–∞", "vodka", "–≤–∫", "vk"],
                  ["–∫–æ–Ω—å—è–∫", "cognac", "–∫–Ω", "cn"],
                  ["–∫–æ–∫—Ç–µ–π–ª—å", "cocktail", "–∫—Ç", "ct"],
                  ["—á–∞–π", "tea", "—á–π", "te"],
                  ["–∫–æ—Ñ–µ", "coffee", "–∫—Ñ", "cf"],
                  ["–ø–µ—á–µ–Ω—å–∫–∏", "cookies", "–ø—á", "ck"]]

BEER_EMODJI: str = "üç∫"
COFFEE_EMODJI: str = "‚òïÔ∏è"
COGNAC_EMODJI: str = "ü•É"
COCKTAIL_EMODJI: str = "üçπ"
COOKIE_EMODJI: str = "üç™"
BARMAN_FOLDER: str = "barman/"
# *** –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤
BAR_RELOAD: list = ["barreload", "brl"]

BEER_CANS_PATH: str = "beer_cans.txt"
BEER_MARKS_PATH: str = "beer_marks.txt"
BEER_CANS_KEY: str = "bcans"
BEER_MARKS_KEY: str = "bmarks"

COCKTAIL_MARKS_PATH: str = "cocktail_marks.txt"

COFFEE_MARKS_PATH: str = "coffee_marks.txt"
COFFEE_MARKS_KEY: str = "cfmarks"
COFFEE_FILLS_PATH: str = "coffee_fills.txt"
COFFEE_FILLS_KEY: str = "cffills"

COGNAC_CANS_PATH: str = "cognac_cans.txt"
COGNAC_CANS_KEY: str = "cgcans"
COGNAC_MARKS_PATH: str = "cognac_marks.txt"
COGNAC_MARKS_KEY: str = "cgmarks"
COGNAC_FILLS_PATH: str = "cognac_fills.txt"
COGNAC_FILLS_KEY: str = "cgfills"

COOKIES_SOURCES_PATH: str = "cookies_sources.txt"
COOKIES_SOURCES_KEY: str = "cksrc"
COOKIES_MARKS_PATH: str = "cookies_marks.txt"
COOKIES_MARKS_KEY: str = "ckmrk"
COOKIES_TRANSFER_PATH: str = "cookies_transfer.txt"
COOKIES_TRANSFER_KEY: str = "cktrf"

DRINKS_SOURCES_PATH: str = "drink_sources.txt"
DRINKS_SOURCES_KEY: str = "drsrc"
DRINKS_TRANSFER_PATH: str = "drink_transfer.txt"
DRINKS_TRANSFER_KEY: str = "drtrf"

TEA_MARKS_PATH: str = "tea_marks.txt"
TEA_MARKS_KEY: str = "teamr"
TEA_FILLS_PATH: str = "tea_fills.txt"
TEA_FILLS_KEY: str = "teafl"

VODKA_CANS_PATH: str = "vodka_cans.txt"
VODKA_CANS_KEY: str = "vdcans"
VODKA_MARKS_PATH: str = "vodka_marks.txt"
VODKA_MARKS_KEY: str = "vdmarks"
VODKA_FILLS_PATH: str = "vodka_fills.txt"
VODKA_FILLS_KEY: str = "vdfills"

# *** –ö–ª—é—á –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –∫–æ–Ω—Ñ–∏–≥–∞
ENABLED_IN_CHATS_KEY: str = "barman_chats"
BAR_HINT: list = ["–±–∞—Ä", "bar"]


class CBarman(prototype.CPrototype):
    """–ö–ª–∞—Å—Å –±–∞—Ä–º–µ–Ω–∞."""

    def __init__(self, pconfig, pdata_path):

        super().__init__()
        self.config = pconfig
        self.data_path = pdata_path+BARMAN_FOLDER
        print(self.data_path)
        self.beer: dict = {}
        self.cocktail: list = []
        self.cognac: dict = {}
        self.vodka: dict = {}
        self.coffee: dict = {}
        self.cookies: dict = {}
        self.tea: dict = {}
        self.drinks: dict = {}
        self.reload()

    def barman(self, pchat_title: str, pmessage_text: str, puser_title: str) -> str:
        """–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        assert pchat_title is not None, \
            "Assert: [barman.barman] No <pchat_title> parameter specified!"
        assert puser_title is not None, \
            "Assert: [barman.barman] No <puser_title> parameter specified!"
        assert pmessage_text is not None, \
            "Assert: [barman.barman] No <pmessage_text> parameter specified!"
        command: int
        message: str = ""
        word_list: list = func.parse_input(pmessage_text)

        if self.can_process(pchat_title, pmessage_text):

            # *** –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –º–µ–Ω—é.
            if word_list[0] in BAR_HINT:

                message = "–°–µ–≥–æ–¥–Ω—è –≤ –±–∞—Ä–µ –∏–º–µ–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç: \n" + \
                          self.get_help(pchat_title)
            elif word_list[0] in BAR_RELOAD:

                self.reload()
                message = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
            else:

                # *** –ù–µ—Ç, –≤–∏–¥–∏–º–æ, –Ω–∞–ø–∏—Ç–æ–∫.
                command = self.get_command(word_list[0])
                name_to = puser_title
                if len(word_list) > 1:

                    name_to = word_list[1]
                # *** –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                message = self.execute_command(command, name_to)
        if len(message) > 0:

            print(f"Barman answers: {message[:16]}")
        return message

    def bring_beer(self, puser_name: str) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∏–≤–æ."""
        assert puser_name is not None, \
            "Assert: [barman.bring_beer] No <puser_name> parameter specified!"
        if (BEER_CANS_KEY in self.beer and
                BEER_MARKS_KEY in self.beer and
                DRINKS_SOURCES_KEY in self.drinks and
                DRINKS_TRANSFER_KEY in self.drinks):

            can: str = random.choice(self.beer[BEER_CANS_KEY])
            beer: str = random.choice(self.beer[BEER_MARKS_KEY])
            source: str = random.choice(self.drinks[DRINKS_SOURCES_KEY])
            transfer: str = random.choice(self.drinks[DRINKS_TRANSFER_KEY])
            return f"Softice {source} {can} –ø–∏–≤–∞ \"{beer}\" {transfer} {puser_name} {BEER_EMODJI}"
        return "–ê –Ω–µ—Ç—É –ø–∏–≤–∞! :("

    def bring_cocktail(self, puser_name: str) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–∫—Ç–µ–π–ª—å."""
        assert puser_name is not None, \
            "Assert: [barman.bring_cocktail] No <puser_name> parameter specified!"

        if (DRINKS_SOURCES_KEY in self.drinks and
                self.cocktail is not None and
                VODKA_FILLS_KEY in self.vodka):

            source: str = random.choice(self.drinks[DRINKS_SOURCES_KEY])
            cocktail: str = random.choice(self.cocktail)
            transfer: str = random.choice(self.vodka[VODKA_FILLS_KEY])
            return f"Softice {source} {cocktail} –∏ {transfer} {puser_name} {COCKTAIL_EMODJI}"
        return "–ö–æ–Ω—á–∏–ª–∏—Å—å –∫–æ–∫—Ç–µ–π–ª–∏! =("

    def bring_coffee(self, puser_name: str) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ—Ñ–µ."""
        assert puser_name is not None, \
            "Assert: [barman.bring_coffee] No <puser_name> parameter specified!"
        if (COFFEE_FILLS_KEY in self.coffee and
                COFFEE_MARKS_KEY in self.coffee and
                DRINKS_TRANSFER_KEY in self.drinks):

            fill: str = random.choice(self.coffee[COFFEE_FILLS_KEY])
            coffee: str = random.choice(self.coffee[COFFEE_MARKS_KEY])
            transfer: str = random.choice(self.drinks[DRINKS_TRANSFER_KEY])
            return f"Softice {fill} –∫–æ—Ñ–µ \"{coffee}\" {transfer} {puser_name} {COFFEE_EMODJI}"
        return "–ö–æ—Ñ–µ –≤–µ—Å—å –≤—ã—à–µ–ª. :-\\"

    def bring_cognac(self, puser_name: str) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—å—è–∫."""
        assert puser_name is not None, \
            "Assert: [barman.bring_cognac] No <puser_name> parameter specified!"
        if (DRINKS_SOURCES_KEY in self.drinks and
                COGNAC_CANS_KEY in self.cognac and
                COGNAC_MARKS_KEY in self.cognac and
                COGNAC_FILLS_KEY in self.cognac):

            source: str = random.choice(self.drinks[DRINKS_SOURCES_KEY])
            can: str = random.choice(self.cognac[COGNAC_CANS_KEY])
            cognac: str = random.choice(self.cognac[COGNAC_MARKS_KEY])
            transfer: str = random.choice(self.cognac[COGNAC_FILLS_KEY])
            return f"Softice {source} {can} {cognac} –∏ {transfer} {puser_name} {COGNAC_EMODJI}"
        return "–í—ã–ø–∏–ª–∏ –≤–µ—Å—å –∫–æ–Ω—å—è–∫. 8("

    def bring_cookies(self, puser_name: str) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—á–µ–Ω—å–∫–∏."""
        assert puser_name is not None, \
            "Assert: [barman.bring_cookies] No <puser_name> parameter specified!"
        if (COOKIES_SOURCES_KEY in self.cookies and
                COOKIES_MARKS_KEY in self.cookies and
                COOKIES_TRANSFER_KEY in self.cookies):

            source: str = random.choice(self.cookies[COOKIES_SOURCES_KEY])
            # can: str = "–ø–∞—á–∫—É"
            cookies: str = random.choice(self.cookies[COOKIES_MARKS_KEY])
            transfer: str = random.choice(self.cookies[COOKIES_TRANSFER_KEY])
            # print(cookies, COOKIES_MARKS_KEY, self.cookies[COOKIES_MARKS_KEY])
            return (f"Softice {source} –ø–µ—á–µ–Ω—å–µ \"{cookies}\" {transfer} "
                    f"{puser_name} {COOKIE_EMODJI}")
        return "–ù–µ—Ç—É –ø–µ—á–µ–Ω—å—è. –ú—ã—à–∏ —Å—ä–µ–ª–∏. B("

    def bring_tea(self, puser_name: str) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —á–∞–π."""
        assert puser_name is not None, \
            "Assert: [barman.bring_tea] No <puser_name> parameter specified!"
        if (TEA_FILLS_KEY in self.tea and
                TEA_MARKS_KEY in self.tea and
                DRINKS_TRANSFER_KEY in self.drinks):

            fill: str = random.choice(self.tea[TEA_FILLS_KEY])
            tea: str = random.choice(self.tea[TEA_MARKS_KEY])
            transfer: str = random.choice(self.drinks[DRINKS_TRANSFER_KEY])
            return f"Softice {fill} {tea} {transfer} {puser_name}"
        return "–ß–∞—é –Ω–µ—Ç. 8()"

    def bring_vodka(self, puser_name: str) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∏–≤–æ."""
        assert puser_name is not None, \
            "Assert: [barman.bring_vodka] No <puser_name> parameter specified!"
        if (DRINKS_SOURCES_KEY in self.drinks and
                VODKA_CANS_KEY in self.vodka and
                VODKA_MARKS_KEY in self.vodka and
                VODKA_FILLS_KEY in self.vodka):

            source: str = random.choice(self.drinks[DRINKS_SOURCES_KEY])
            can: str = random.choice(self.vodka[VODKA_CANS_KEY])
            vodka: str = random.choice(self.vodka[VODKA_MARKS_KEY])
            transfer: str = random.choice(self.vodka[VODKA_FILLS_KEY])
            return f"Softice {source} {can} {vodka} –∏ {transfer} {puser_name}"
        return "–ê –≤–æ–¥–æ—á–∫–∞-—Ç–æ —Ç—é—Ç—é. –ö–æ–Ω—á–∏–ª–∞—Å—å –≤—Å—è. 8(  ]"

    def can_process(self, pchat_title: str, pmessage_text: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±–∞—Ä–º–µ–Ω –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
        >>> self.can_process({'barman_chats':'–ë–æ—Ç–æ–≤–∫–∞'}, '–ë–æ—Ç–æ–≤–∫–∞', '!vodka')
        True
        >>> self.can_process({'barman_chats':'–•–æ–∫–∫—É'}, '–ë–æ—Ç–æ–≤–∫–∞', '!vodka')
        False
        >>> self.can_process({'barman_chats':'–ë–æ—Ç–æ–≤–∫–∞'}, '–ë–æ—Ç–æ–≤–∫–∞', '!–º–∞—Ä—Ç–∏–Ω–∏')
        False
        """
        assert pchat_title is not None, \
            "Assert: [barman.can_process] " \
            "No <pchat_title> parameter specified!"
        assert pmessage_text is not None, \
            "Assert: [barman.can_process] " \
            "No <pmessage_text> parameter specified!"
        found: bool = False
        if self.is_enabled(pchat_title):

            word_list: list = func.parse_input(pmessage_text)
            for command in COMMANDS:

                found = word_list[0] in command
                if found:

                    break
            if not found:

                for command in BAR_HINT:

                    found = word_list[0] in command
                    if found:

                        break
        return found

    def execute_command(self, pcommand: int, pname_to: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã."""
        assert pcommand is not None, \
            "Assert: [barman.execute_process] " \
            "No <pcommand> parameter specified!"
        assert pname_to is not None, \
            "Assert: [barman.execute_process] " \
            "No <pname_to> parameter specified!"
        message: str = f"{COMMANDS[pcommand][0]}, —Å—ç—Ä!"
        if pcommand == BEER_ID:

            message = self.bring_beer(pname_to)
        if pcommand == COCKTAIL_ID:

            message = self.bring_cocktail(pname_to)
        if pcommand == COFFEE_ID:

            message = self.bring_coffee(pname_to)
        if pcommand == COGNAC_ID:

            message = self.bring_cognac(pname_to)
        if pcommand == COOKIES_ID:

            message = self.bring_cookies(pname_to)
        if pcommand == TEA_ID:

            message = self.bring_tea(pname_to)
        if pcommand == VODKA_ID:

            message = self.bring_vodka(pname_to)
        return message

    def get_command(self, pword: str) -> int:  # noqa
        """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –∫–æ–¥, –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ - None.
        >>> self.get_command("–ø–∏–≤–æ")
        0
        >>> self.get_command("cognac")
        4
        >>> self.get_command("–≤–∫")
        1
        >>> self.get_command("ck")
        6
        >>> type(self.get_command("–∞–±—Ä–∞–∫–∞–¥–∞–±—Ä–∞"))
        <class 'NoneType'>
        """
        assert pword is not None, \
            "Assert: [barman.get_command] " \
            "No <pword> parameter specified!"
        result: int = 0
        for command_idx, command in enumerate(COMMANDS):

            if pword in command:

                result = command_idx
        return result

    def get_help(self, pchat_title: str) -> str:  # noqa
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
        if self.is_enabled(pchat_title):

            command_list: str = ""
            for command in COMMANDS:

                for kind in command:

                    command_list += kind + ", "
                command_list = command_list[:-2]
                command_list += "\n"
            return command_list

    def get_hint(self, pchat_title: str) -> str:  # [arguments-differ]
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥—É–ª–µ–º.  """
        assert pchat_title is not None, \
            "Assert: [barman.get_hint] " \
            "No <pchat_title> parameter specified!"
        if self.is_enabled(pchat_title):

            return ", ".join(BAR_HINT)
        return ""

    def is_enabled(self, pchat_title: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±–∞—Ä–º–µ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.
        >>> self.is_enabled({'barman_chats':'–ë–æ—Ç–æ–≤–∫–∞'}, '–ë–æ—Ç–æ–≤–∫–∞')
        True
        >>> self.is_enabled({'barman_chats':'–•–æ–∫–∫—É'}, '–ë–æ—Ç–æ–≤–∫–∞')
        False
        """
        assert pchat_title is not None, \
            "Assert: [barman.is_enabled] " \
            "No <pchat_title> parameter specified!"

        return pchat_title in self.config[ENABLED_IN_CHATS_KEY]

    def load_beer(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏–≤–∞."""
        beer_cans: list = func.load_from_file(self.data_path + BEER_CANS_PATH)
        if beer_cans:

            print("Barmen loads ", len(beer_cans), " beer cans.")
            self.beer[BEER_CANS_KEY] = beer_cans

            beer_marks: list = func.load_from_file(self.data_path + BEER_MARKS_PATH)
            if beer_marks:

                print("Barmen loads ", len(beer_marks), " beer marks.")
                self.beer[BEER_MARKS_KEY] = beer_marks
                return True
        return False

    def load_coffee(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏–≤–∞."""
        coffee_marks: list = func.load_from_file(self.data_path + COFFEE_MARKS_PATH)
        if coffee_marks:

            print("Barmen loads ", len(coffee_marks), " coffee marks.")
            self.coffee[COFFEE_MARKS_KEY] = coffee_marks

            coffee_fills: list = func.load_from_file(self.data_path + COFFEE_FILLS_PATH)
            if coffee_fills:

                print("Barmen loads ", len(coffee_fills), " coffee fills.")
                self.coffee[COFFEE_FILLS_KEY] = coffee_fills
                return True
        return False

    def load_cocktail(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–µ–π"""
        self.cocktail = func.load_from_file(self.data_path + COCKTAIL_MARKS_PATH)
        if self.cocktail:

            print("Barmen loads ", len(self.cocktail), " cocktail marks.")
            return True
        return False

    def load_cognac(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏–≤–∞."""
        cognac_cans: list = func.load_from_file(self.data_path + COGNAC_CANS_PATH)
        if cognac_cans:

            print("Barmen loads ", len(cognac_cans), " cognac cans.")
            self.cognac[COGNAC_CANS_KEY] = cognac_cans

            cognac_marks: list = func.load_from_file(self.data_path + COGNAC_MARKS_PATH)
            if cognac_marks:

                print("Barmen loads ", len(cognac_marks), " cognac marks.")
                self.cognac[COGNAC_MARKS_KEY] = cognac_marks

                cognac_fills: list = func.load_from_file(self.data_path + COGNAC_FILLS_PATH)
                if cognac_fills:

                    print("Barmen loads ", len(cognac_fills), " cognac fills.")
                    self.cognac[COGNAC_FILLS_KEY] = cognac_fills
                    return True
        return False

    def load_cookies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏–≤–∞."""
        cookies_sources: list = func.load_from_file(self.data_path + COOKIES_SOURCES_PATH)
        if cookies_sources:

            print("Barmen loads ", len(cookies_sources), " cookies sources.")
            self.cookies[COOKIES_SOURCES_KEY] = cookies_sources

            cookies_marks: list = func.load_from_file(self.data_path + COOKIES_MARKS_PATH)
            if cookies_marks:

                print("Barmen loads ", len(cookies_marks), " cookies marks.")
                self.cookies[COOKIES_MARKS_KEY] = cookies_marks

                cookies_transfer: list = func.load_from_file(self.data_path + COOKIES_TRANSFER_PATH)
                if cookies_transfer:

                    print("Barmen loads ", len(cookies_transfer), " cookies transfer.")
                    self.cookies[COOKIES_TRANSFER_KEY] = cookies_transfer
                    return True
        return False

    def load_drinks(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏–≤–∞."""
        drinks_sources: list = func.load_from_file(self.data_path + DRINKS_SOURCES_PATH)
        if drinks_sources:

            print("Barmen loads ", len(drinks_sources), " drinks sources.")
            self.drinks[DRINKS_SOURCES_KEY] = drinks_sources

            drinks_transfer: list = func.load_from_file(self.data_path + DRINKS_TRANSFER_PATH)
            if drinks_transfer:

                print("Barmen loads ", len(drinks_transfer), " drinks transfer.")
                self.drinks[DRINKS_TRANSFER_KEY] = drinks_transfer
                return True
        return False

    def load_tea(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏–≤–∞."""
        tea_marks: list = func.load_from_file(self.data_path + TEA_MARKS_PATH)
        if tea_marks:

            print("Barmen loads ", len(tea_marks), " tea marks.")
            self.tea[TEA_MARKS_KEY] = tea_marks

            tea_fills: list = func.load_from_file(self.data_path + TEA_FILLS_PATH)
            if tea_fills:

                print("Barmen loads ", len(tea_fills), " tea fills.")
                self.tea[TEA_FILLS_KEY] = tea_fills
                return True
        return False

    def load_vodka(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏–≤–∞."""
        vodka_cans: list = func.load_from_file(self.data_path + VODKA_CANS_PATH)
        if vodka_cans:

            print("Barmen loads ", len(vodka_cans), " vodka cans.")
            self.vodka[VODKA_CANS_KEY] = vodka_cans

            vodka_marks: list = func.load_from_file(self.data_path + VODKA_MARKS_PATH)
            if vodka_marks:

                print("Barmen loads ", len(vodka_marks), " vodka marks.")
                self.vodka[VODKA_MARKS_KEY] = vodka_marks

                vodka_fills: list = func.load_from_file(self.data_path + VODKA_FILLS_PATH)
                if vodka_fills:

                    print("Barmen loads ", len(vodka_fills), " vodka fills.")
                    self.vodka[VODKA_FILLS_KEY] = vodka_fills
                    return True
        return False

    def reload(self):
        """–ü–µ—Ä–µ–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞—Ä–∞."""
        if (self.load_beer() and
                self.load_coffee() and
                self.load_cocktail() and
                self.load_cognac()):

            if (self.load_cookies() and
                    self.load_drinks() and
                    self.load_tea() and
                    self.load_vodka()):

                print("Barman successfully reload bar assortiment.")
