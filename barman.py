# -*- coding: utf-8 -*-
# @author: Andrey Pakhomenkov pakhomenkov@yandex.ru
"""–ú–æ–¥—É–ª—å –±–∞—Ä–º–µ–Ω–∞."""

import random

import functions as func
import prototype

# *** –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
COMMANDS: list = [["–ø–∏–≤–æ", "beer", "–ø–≤", "br"],  # ***
                  ["–≤–æ–¥–∫–∞", "vodka", "–≤–∫", "vk"],
                  ["–∫–æ–Ω—å—è–∫", "cognac", "–∫–Ω", "cn"],
                  ["–∫–æ–∫—Ç–µ–π–ª—å", "cocktail", "–∫—Ç", "ct"],
                  ["—á–∞–π", "tea", "—á–π", "te"],
                  ["–∫–æ—Ñ–µ", "coffee", "–∫—Ñ", "cf"],
                  ["–ø–µ—á–µ–Ω—å–∫–∏", "cookies", "–ø—á", "ck"],
                  ["—à–æ–∫–æ–ª–∞–¥", "chocolate", "—à–∫", "ch"],
                  ["–º–æ—Ä–æ–∂–µ–Ω–æ–µ", "icecream", "–º—Ä", "ic"],
                  ["–±—É–ª–æ—á–∫–∞", "bun", "–±—á", "bn"]
                  ]

# *** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –æ–Ω–∏ –∂–µ –∏–Ω–¥–µ–∫—Å—ã, –Ω–∞–ø–∏—Ç–∫–æ–≤, –∏—Ö –∫–ª—é—á–∏ –∏ —ç–º–æ–¥–∑–∏
ID_KEY: str = "id"
PROPERTIES_KEY: str = "properties"
EMODJI_KEY: str = "emodji"
COMMAND_KEY: str = "command"
SOURCES_KEY: str = "sources"
MARKS_KEY: str = "marks"
CANS_KEY: str = "cans"
FILLS_KEY: str = "fills"
TRANSFER_KEY: str = "transfer"
TEMPLATE_KEY: str = "template"

BEER_ID: int = 0
VODKA_ID: int = 1
COGNAC_ID: int = 2
COCKTAIL_ID: int = 3
TEA_ID: int = 4
COFFEE_ID: int = 5
COOKIE_ID: int = 6
CHOCOLATE_ID: int = 7
ICECREAM_ID: int = 8
BUN_ID: int = 9

ASSORTIMENT: tuple = ({ID_KEY: BEER_ID,
                       EMODJI_KEY: "üç∫",
                       COMMAND_KEY: COMMANDS[BEER_ID],
                       SOURCES_KEY: "drink_sources.txt",
                       CANS_KEY: "beer_cans.txt",
                       MARKS_KEY: "beer_marks.txt",
                       TRANSFER_KEY: "drink_transfer.txt",
                       PROPERTIES_KEY: (SOURCES_KEY, CANS_KEY, MARKS_KEY, TRANSFER_KEY),
                       TEMPLATE_KEY: "Softice {0} {1} –ø–∏–≤–∞ \"{2}\" {3} {4} {5}"},
                      {ID_KEY: VODKA_ID,
                       EMODJI_KEY: "üç∏",
                       COMMAND_KEY: COMMANDS[VODKA_ID],
                       SOURCES_KEY: "drink_sources.txt",
                       CANS_KEY: "vodka_cans.txt",
                       MARKS_KEY: "vodka_marks.txt",
                       FILLS_KEY: "vodka_fills.txt",
                       PROPERTIES_KEY: (SOURCES_KEY, CANS_KEY, MARKS_KEY, FILLS_KEY),
                       TEMPLATE_KEY: "Softice {0} {1} {2} –∏ {3} {4} {5}"},
                      {ID_KEY: COGNAC_ID,
                       EMODJI_KEY: "ü•É",
                       COMMAND_KEY: COMMANDS[COGNAC_ID],
                       SOURCES_KEY: "drink_sources.txt",
                       CANS_KEY: "cognac_cans.txt",
                       MARKS_KEY: "cognac_marks.txt",
                       FILLS_KEY: "cognac_fills.txt",
                       PROPERTIES_KEY: (SOURCES_KEY, CANS_KEY, MARKS_KEY, FILLS_KEY),
                       TEMPLATE_KEY: "Softice {0} {1} {2} –∏ {3} {4} {5}"},
                      {ID_KEY: COCKTAIL_ID,
                       EMODJI_KEY: "üçπ",
                       COMMAND_KEY: COMMANDS[COCKTAIL_ID],
                       SOURCES_KEY: "drink_sources.txt",
                       MARKS_KEY: "cocktail_marks.txt",
                       FILLS_KEY: "cocktail_fills.txt",
                       PROPERTIES_KEY: (SOURCES_KEY, MARKS_KEY, FILLS_KEY),
                       TEMPLATE_KEY: "Softice {0} {1} –∏ {2} {3} {4}"},
                      {ID_KEY: TEA_ID,
                       EMODJI_KEY: "ü´ñ",
                       COMMAND_KEY: COMMANDS[TEA_ID],
                       FILLS_KEY: "tea_fills.txt",
                       MARKS_KEY: "tea_marks.txt",
                       TRANSFER_KEY: "drink_transfer.txt",
                       PROPERTIES_KEY: (FILLS_KEY, MARKS_KEY, TRANSFER_KEY),
                       TEMPLATE_KEY: "Softice {0} {1} {2} {3} {4}"},
                      {ID_KEY: COFFEE_ID,
                       EMODJI_KEY: "‚òïÔ∏è",
                       COMMAND_KEY: COMMANDS[COFFEE_ID],
                       TRANSFER_KEY: "drink_transfer.txt",
                       MARKS_KEY: "coffee_marks.txt",
                       FILLS_KEY: "coffee_fills.txt",
                       PROPERTIES_KEY: (FILLS_KEY, MARKS_KEY, TRANSFER_KEY),
                       TEMPLATE_KEY: "Softice {0} –∫–æ—Ñ–µ \"{1}\" {2} {3} {4}"},
                      {ID_KEY: COOKIE_ID,
                       EMODJI_KEY: "üç™",
                       COMMAND_KEY: COMMANDS[COOKIE_ID],
                       SOURCES_KEY: "cookies_sources.txt",
                       MARKS_KEY: "cookies_marks.txt",
                       TRANSFER_KEY: "cookies_transfer.txt",
                       PROPERTIES_KEY: (SOURCES_KEY, MARKS_KEY, TRANSFER_KEY),
                       TEMPLATE_KEY: "Softice {0} –ø–µ—á–µ–Ω—å–µ \"{1}\" {2} {3} {4}"},
                      {ID_KEY: CHOCOLATE_ID,
                       EMODJI_KEY: "üç´",
                       COMMAND_KEY: COMMANDS[CHOCOLATE_ID],
                       SOURCES_KEY: "chocolate_sources.txt",
                       MARKS_KEY: "chocolate_marks.txt",
                       TRANSFER_KEY: "chocolate_transfer.txt",
                       PROPERTIES_KEY: (SOURCES_KEY, MARKS_KEY, TRANSFER_KEY),
                       TEMPLATE_KEY: "Softice {0} {1} {2} {3} {4}"},
                      {ID_KEY: ICECREAM_ID,
                       EMODJI_KEY: "üç¶",
                       COMMAND_KEY: COMMANDS[ICECREAM_ID],
                       SOURCES_KEY: "icecream_sources.txt",
                       MARKS_KEY: "icecream_marks.txt",
                       TRANSFER_KEY: "icecream_transfer.txt",
                       PROPERTIES_KEY: (SOURCES_KEY, MARKS_KEY, TRANSFER_KEY),
                       TEMPLATE_KEY: "Softice {0} {1} {2} {3} {4}"},
                      {ID_KEY: BUN_ID,
                       EMODJI_KEY: "ü•Ø",
                       COMMAND_KEY: COMMANDS[BUN_ID],
                       SOURCES_KEY: "bun_sources.txt",
                       MARKS_KEY: "bun_marks.txt",
                       TRANSFER_KEY: "bun_transfer.txt",
                       PROPERTIES_KEY: (SOURCES_KEY, MARKS_KEY, TRANSFER_KEY),
                       TEMPLATE_KEY: "Softice {0} {1} {2} {3} {4}"}
                      )

# *** –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤
BAR_HINT: list = ["–±–∞—Ä", "bar"]
BAR_RELOAD: list = ["barreload", "barl"]
BARMAN_FOLDER: str = "barman/"
# *** –ö–ª—é—á –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –∫–æ–Ω—Ñ–∏–≥–∞
ENABLED_IN_CHATS_KEY: str = "barman_chats"


class CBarman(prototype.CPrototype):
    """–ö–ª–∞—Å—Å –±–∞—Ä–º–µ–Ω–∞."""

    def __init__(self, pconfig, pdata_path):

        super().__init__()
        self.config = pconfig
        self.data_path = pdata_path + BARMAN_FOLDER
        self.bar_content: dict = {}
        self.load_assortiment()

    def barman(self, pchat_title: str, pmessage_text: str, puser_title: str) -> str:
        """–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        assert pchat_title is not None, \
            "Assert: [barman.barman] No <pchat_title> parameter specified!"
        assert puser_title is not None, \
            "Assert: [barman.barman] No <puser_title> parameter specified!"
        assert pmessage_text is not None, \
            "Assert: [barman.barman] No <pmessage_text> parameter specified!"
        answer: str = ""
        word_list: list = func.parse_input(pmessage_text)
        if self.can_process(pchat_title, pmessage_text):

            # *** –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –º–µ–Ω—é.
            if word_list[0] in BAR_HINT:

                answer = "–°–µ–≥–æ–¥–Ω—è –≤ –±–∞—Ä–µ –∏–º–µ–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç: \n" + \
                         self.get_help(pchat_title)
            elif word_list[0] in BAR_RELOAD:

                self.reload()
                print("Barman successfully reload bar assortiment.")
                answer = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
            else:

                if len(word_list) > 1:

                    answer = self.serve_client(" ".join(word_list[1:]), word_list[0])
                else:

                    answer = self.serve_client(puser_title, word_list[0])
        if answer:

            print(f"Barman answers: {answer[:16]}")
        return answer.strip()

    def serve_client(self, puser_name: str, pcommand: str):
        """–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        assert puser_name is not None, \
            "Assert: [barman.serve_client] No <puser_name> parameter specified!"
        assert pcommand is not None, \
            "Assert: [barman.serve_client] No <pcommand> parameter specified!"
        answer: str = ""
        for item in ASSORTIMENT:

            if pcommand.strip() in item[COMMAND_KEY]:

                arguments: list = []
                for prop in item[PROPERTIES_KEY]:

                    arguments.append(random.choice(self.bar_content[item[ID_KEY]][prop]))
                # *** –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                arguments.append(puser_name)
                # *** –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - —ç—Ç–æ —ç–º–æ–¥–∂–∏
                arguments.append(item[EMODJI_KEY])
                # *** –û–∫, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                answer = item[TEMPLATE_KEY].format(*arguments)
        return answer

    def can_process(self, pchat_title: str, pmessage_text: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±–∞—Ä–º–µ–Ω –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É"""
        assert pchat_title is not None, \
            "Assert: [barman.can_process] " \
            "No <pchat_title> parameter specified!"
        assert pmessage_text is not None, \
            "Assert: [barman.can_process] " \
            "No <pmessage_text> parameter specified!"
        found: bool = False
        if self.is_enabled(pchat_title):

            word_list: list = func.parse_input(pmessage_text)
            for command in COMMANDS:

                found = word_list[0] in command
                if found:

                    break
            if not found:

                found = word_list[0] in BAR_HINT
                if not found:

                    found = word_list[0] in BAR_RELOAD
        return found

    def get_help(self, pchat_title: str) -> str:  # noqa
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
        assert pchat_title is not None, \
            "Assert: [barman.get_help] " \
            "No <pchat_title> parameter specified!"
        command_list: str = ""
        if self.is_enabled(pchat_title):

            for command in COMMANDS:

                command_list += ", ".join(command) + "\n"
        return command_list

    def get_hint(self, pchat_title: str) -> str:  # [arguments-differ]
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥—É–ª–µ–º.  """
        assert pchat_title is not None, \
            "Assert: [barman.get_hint] " \
            "No <pchat_title> parameter specified!"
        if self.is_enabled(pchat_title):

            return ", ".join(BAR_HINT)
        return ""

    def is_enabled(self, pchat_title: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±–∞—Ä–º–µ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ."""
        assert pchat_title is not None, \
            "Assert: [barman.is_enabled] " \
            "No <pchat_title> parameter specified!"

        return pchat_title in self.config[ENABLED_IN_CHATS_KEY]

    def load_assortiment(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –±–∞—Ä–∞."""
        for item in ASSORTIMENT:

            self.load_item(item)
        print(f"Barman successfully loaded {len(ASSORTIMENT)} items")

    def load_item(self, pitem: dict):  # pmainkey: str, pkeys: tuple, pproperties: dict):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–Ω–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –±–∞—Ä–∞."""
        assert pitem is not None, \
            "Assert: [barman.load_item] " \
            "No <pitem> parameter specified!"
        storage: dict = {}
        for key in pitem[PROPERTIES_KEY]:

            storage[key] = func.load_from_file(self.data_path + pitem[key])

        self.bar_content[pitem[ID_KEY]] = storage

    def reload(self):  # , pchat_id: int, puser_name: str, puser_title):
        """–ü–µ—Ä–µ–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞—Ä–∞."""

        self.load_assortiment()
